const questionsConfig = `
    <h1>Вопросы и ответы</h1>

<ol>
  <li>
    <h3>Какой компанией был разработан фреймворк Angular?</h3>
    <ul>
      <li><strong>Google</strong></li>
      <li>Facebook</li>
      <li>Microsoft</li>
      <li>Amazon</li>
    </ul>
  </li>

  <li>
    <h3>В чём заключается суть модульной архитектуры Angular?</h3>
    <ul>
      <li><strong>Возможность разделения приложения на независимые и переиспользуемые модули</strong></li>
      <li>Использование JavaScript вместо TypeScript</li>
      <li>Наличие встроенного редактора</li>
      <li>Разработка без шаблонов</li>
    </ul>
  </li>

  <li>
    <h3>Из каких частей состоит компонент в Angular?</h3>
    <ul>
      <li><strong>Класс, шаблон, стили и метаданные</strong></li>
      <li>Только шаблон и логика</li>
      <li>Стили и маршруты</li>
      <li>Лишь данные и сервисы</li>
    </ul>
  </li>

  <li>
    <h3>Почему в Angular используется TypeScript, а не чистый JavaScript?</h3>
    <ul>
      <li><strong>Потому что он предоставляет статическую типизацию и улучшает читаемость кода</strong></li>
      <li>Он работает быстрее</li>
      <li>Он требует меньше памяти</li>
      <li>JavaScript устарел</li>
    </ul>
  </li>

  <li>
    <h3>Что такое инжектор зависимостей и зачем он нужен в архитектуре Angular?</h3>
    <ul>
      <li><strong>Это механизм, который предоставляет экземпляры сервисов компонентам</strong></li>
      <li>Это инструмент для создания DOM-элементов</li>
      <li>Это шаблонизатор данных</li>
      <li>Это тип роутера</li>
    </ul>
  </li>

  <li>
    <h3>Какие преимущества предоставляет использование RxJS в Angular?</h3>
    <ul>
      <li><strong>Упрощает работу с асинхронными данными с помощью Observables</strong></li>
      <li>Добавляет поддержку jQuery</li>
      <li>Оптимизирует CSS</li>
      <li>Повышает безопасность приложения</li>
    </ul>
  </li>

  <li>
    <h3>Что такое DOM?</h3>
    <ul>
      <li><strong>Это структура, представляющая HTML-документ как дерево объектов</strong></li>
      <li>Это база данных для хранения HTML-кода</li>
      <li>Это язык программирования</li>
      <li>Это библиотека JavaScript</li>
    </ul>
  </li>

  <li>
    <h3>Что такое виртуальный DOM и чем он отличается от реального DOM?</h3>
    <ul>
      <li><strong>Это легковесная копия DOM, обновляемая в памяти для оптимизации отрисовки</strong></li>
      <li><strong>Это альтернативный язык разметки</strong></li>
      <li>Это библиотека для стилизации</li>
      <li>Это серверная версия DOM</li>
    </ul>
  </li>

  <li>
    <h3>Какие этапы включает в себя алгоритм работы виртуального DOM в React?</h3>
    <ul>
      <li><strong>Создание виртуального дерева, сравнение с предыдущим и обновление реального DOM</strong></li>
      <li>Отправка HTML на сервер</li>
      <li>Сжатие кода перед отрисовкой</li>
      <li>Асинхронная загрузка CSS</li>
    </ul>
  </li>

  <li>
    <h3>Что такое React Hooks и зачем они были введены в функциональные компонентах?</h3>
    <ul>
      <li><strong>Это способ использовать состояние и побочные эффекты в функциональных компонентах</strong></li>
      <li>Это библиотека для стилизации компонентов</li>
      <li>Это шаблоны пользовательских интерфейсов</li>
      <li>Это способ подключать плагины</li>
    </ul>
  </li>

  <li>
    <h3>Для чего используется хук useState и какие задачи он решает?</h3>
    <ul>
      <li><strong>Для хранения и обновления локального состояния компонента</strong></li>
      <li>Для управления стилями</li>
      <li>Для передачи данных в URL</li>
      <li>Для работы с DOM напрямую</li>
    </ul>
  </li>

  <li>
    <h3>Какую роль выполняет хук useEffect?</h3>
    <ul>
      <li><strong>Позволяет выполнять побочные эффекты в функциональных компонентах</strong></li>
      <li><strong>Создаёт глобальное состояние</strong></li>
      <li>Проводит оптимизацию рендера</li>
      <li>Генерирует HTML напрямую</li>
    </ul>
  </li>

  <li>
    <h3>Как работает реактивная система Vue.js и как она влияет на производительность интерфейса?</h3>
    <ul>
      <li><strong>Она отслеживает изменения данных и автоматически обновляет интерфейс</strong></li>
      <li>Она создаёт копии компонентов</li>
      <li>Она управляет стилями CSS</li>
      <li>Она отключает обновления вручную</li>
    </ul>
  </li>

  <li>
    <h3>В чём разница между computed-свойствами и обычными функциями?</h3>
    <ul>
      <li><strong>Computed-кэшируются и пересчитываются только при изменении зависимостей</strong></li>
      <li><strong>Они работают медленнее</strong></li>
      <li>Они не поддерживают методы</li>
      <li>Они всегда асинхронны</li>
    </ul>
  </li>

  <li>
    <h3>Какова роль watch-наблюдателей в архитектуре Vue и когда их следует использовать?</h3>
    <ul>
      <li><strong>Для отслеживания изменений и выполнения действий при изменении данных</strong></li>
      <li>Для стилизации DOM</li>
      <li>Для хранения глобальных данных</li>
      <li>Для обработки событий мыши</li>
    </ul>
  </li>

  <li>
    <h3>Как Vue реализует компонентный подход?</h3>
    <ul>
      <li><strong>Через изоляцию логики, шаблонов и стилей в независимых компонентах</strong></li>
      <li><strong>Через наследование классов</strong></li>
      <li>Через глобальные шаблоны</li>
      <li>Через inline-скрипты</li>
    </ul>
  </li>

  <li>
    <h3>Почему Vue считается компромиссом между простотой и мощностью?</h3>
    <ul>
      <li><strong>Потому что он лёгкий в изучении и при этом функционален для сложных задач</strong></li>
      <li>Потому что он не поддерживает TypeScript</li>
      <li>Потому что он только для серверной разработки</li>
      <li>Потому что он не работает в браузерах</li>
    </ul>
  </li>

  <li>
    <h3>Какие инструменты входят в экосистему Vue?</h3>
    <ul>
      <li><strong>Vue Router, Vuex, Vue CLI</strong></li>
      <li>React Router, Redux, Webpack</li>
      <li>jQuery UI, Gulp, Grunt</li>
      <li>Angular CLI, RxJS, Zone.js</li>
    </ul>
  </li>

  <li>
    <h3>В чём принципиальное отличие архитектуры Svelte от React и Vue?</h3>
    <ul>
      <li><strong>Svelte компилирует код на этапе сборки и не использует виртуальный DOM</strong></li>
      <li>Это серверная версия DOM</li>
      <li>Это библиотека для стилизации</li>
      <li>Это альтернативный язык разметки</li>
    </ul>
  </li>

  <li>
    <h3>Какие преимущества даёт предварительная компиляция в Svelte?</h3>
    <ul>
      <li><strong>Повышенная производительность и меньший размер бандла</strong></li>
      <li><strong>Лучшее взаимодействие с CSS</strong></li>
      <li>Поддержка PHP</li>
      <li>Автоматическая SEO-оптимизация</li>
    </ul>
  </li>

  <li>
    <h3>Как реализована реактивность в Svelte?</h3>
    <ul>
      <li><strong>Через отслеживание присваиваний переменным</strong></li>
      <li>Через event listeners</li>
      <li>Через мутации DOM</li>
      <li>Через GraphQL</li>
    </ul>
  </li>

  <li>
    <h3>Что делает выражение $: в Svelte?</h3>
    <ul>
      <li><strong>Оно создаёт реактивные зависимости</strong></li>
      <li><strong>Оно вызывает HTTP-запрос</strong></li>
      <li>Оно применяет CSS</li>
      <li>Оно импортирует зависимости</li>
    </ul>
  </li>

  <li>
    <h3>Как обеспечивается изоляция стилей в Svelte?</h3>
    <ul>
      <li><strong>Стили компонентов автоматически scoped</strong></li>
      <li>Путём ручного нейминга классов</li>
      <li>Через глобальные переменные</li>
      <li>С помощью CSS-фреймворков</li>
    </ul>
  </li>

  <li>
    <h3>Почему отказ от виртуального DOM считается преимуществом?</h3>
    <ul>
      <li><strong>Потому что это снижает накладные расходы и увеличивает скорость обновления</strong></li>
      <li><strong>Потому что это упрощает стилизацию</strong></li>
      <li>Потому что это отключает SSR</li>
      <li>Потому что это уменьшает кэш браузера</li>
    </ul>
  </li>

  <li>
    <h3>В чём отличие SSR от CSR?</h3>
    <ul>
      <li><strong>SSR генерирует HTML на сервере, а CSR — в браузере</strong></li>
      <li>SSR отключает JavaScript</li>
      <li>CSR работает без DOM</li>
      <li>CSR предназначен для серверов</li>
    </ul>
  </li>

  <li>
    <h3>Как SSR улучшает SEO?</h3>
    <ul>
      <li><strong>Позволяет поисковым краулерам сразу видеть содержимое</strong></li>
      <li><strong>Отключает кеш</strong></li>
      <li>Заменяет CSS</li>
      <li>Уменьшает JS-бандл</li>
    </ul>
  </li>

  <li>
    <h3>Что такое гибридное приложение в Next.js?</h3>
    <ul>
      <li><strong>Приложение, использующее и SSR, и SSG</strong></li>
      <li>Приложение на PHP</li>
      <li>Мобильное приложение</li>
      <li>CLI-интерфейс</li>
    </ul>
  </li>

  <li>
    <h3>Что делает Incremental Static Regeneration (ISR)?</h3>
    <ul>
      <li><strong>Позволяет обновлять SSG-страницы без полной пересборки</strong></li>
      <li><strong>Отключает SSR</strong></li>
      <li>Удаляет CSS</li>
      <li>Подключает jQuery</li>
    </ul>
  </li>
  
  <li>
    <h3>Что делает Incremental Static Regeneration (ISR)?</h3>
    <ul>
      <li><strong>Позволяет обновлять SSG-страницы без полной пересборки</strong></li>
      <li>Отключает SSR</li>
      <li>Удаляет CSS</li>
      <li>Подключает jQuery</li>
    </ul>
  </li>

  <li>
    <h3>Какие ключевые методы используются в SSR в Next.js?</h3>
    <ul>
      <li><strong>getServerSideProps и getStaticProps</strong></li>
      <li>renderPage и hydrate</li>
      <li>componentDidMount и useEffect</li>
      <li>next.config и exportPathMap</li>
    </ul>
  </li>

  <li>
    <h3>Каковы плюсы SSG?</h3>
    <ul>
      <li><strong>Высокая производительность и мгновенный отклик</strong></li>
      <li>Повышенное потребление памяти</li>
      <li>Сложность настройки</li>
      <li>Зависимость от CDN</li>
    </ul>
  </li>

  <li>
    <h3>Что такое SPA (single-page application) и как он отличается от традиционных сайтов?</h3>
    <ul>
      <li><strong>SPA загружает страницу один раз и обновляет данные без перезагрузки</strong></li>
      <li>SPA требует обновления страницы при каждом действии</li>
      <li>SPA работает только на сервере</li>
      <li>SPA используется только для мобильных приложений</li>
    </ul>
  </li>

  <li>
    <h3>Какие технологии обычно используются во фронтенде?</h3>
    <ul>
      <li><strong>HTML, CSS, JavaScript</strong></li>
      <li>Java, SQL, Python</li>
      <li>MongoDB, PHP, Bootstrap</li>
      <li>Node.js, Nginx, Docker</li>
    </ul>
  </li>

  <li>
    <h3>Как jQuery повлиял на работу с DOM?</h3>
    <ul>
      <li><strong>Он упростил синтаксис и кроссбраузерную совместимость</strong></li>
      <li>Он заменил JavaScript</li>
      <li>Он использовался только на сервере</li>
      <li>Он ухудшил производительность</li>
    </ul>
  </li>

  <li>
    <h3>Что такое MVC-паттерн?</h3>
    <ul>
      <li><strong>Архитектура с разделением на Model, View и Controller</strong></li>
      <li>Алгоритм сжатия изображений</li>
      <li>Шаблон создания анимаций</li>
      <li>Метод тестирования API</li>
    </ul>
  </li>

  <li>
    <h3>Почему AngularJS был популярен в своё время?</h3>
    <ul>
      <li><strong>Благодаря двустороннему связыванию и структуре</strong></li>
      <li>Потому что был единственным фреймворком</li>
      <li>Так как не использовал HTML</li>
      <li>Из-за встроенного Redux</li>
    </ul>
  </li>

  <li>
    <h3>Какой подход используется в SSG?</h3>
    <ul>
      <li><strong>Предварительная генерация страниц на этапе сборки</strong></li>
      <li>Генерация страниц в браузере</li>
      <li>Создание страниц вручную</li>
      <li>Генерация страниц по WebSocket</li>
    </ul>
  </li>

  <li>
    <h3>Какие отличия в рендеринге у React и Svelte?</h3>
    <ul>
      <li><strong>React использует виртуальный DOM, Svelte компилирует обновления напрямую</strong></li>
      <li>React рендерит сервер, Svelte — браузер</li>
      <li>Svelte использует jQuery</li>
      <li>React работает без DOM</li>
    </ul>
  </li>

  <li>
    <h3>Почему Vue считается более доступным для новичков?</h3>
    <ul>
      <li><strong>У него простой синтаксис и хорошая документация</strong></li>
      <li>Он требует меньше памяти</li>
      <li>Он не использует JavaScript</li>
      <li>Он основан на CSS</li>
    </ul>
  </li>

  <li>
    <h3>Какие архитектурные особенности есть у Angular?</h3>
    <ul>
      <li><strong>Модульность и строгая типизация через TypeScript</strong></li>
      <li>Использование JSON для навигации</li>
      <li>Глобальные переменные</li>
      <li>Полное отсутствие шаблонов</li>
    </ul>
  </li>

  <li>
    <h3>Почему Svelte интересен разработчикам?</h3>
    <ul>
      <li><strong>Из-за высокой производительности и простоты</strong></li>
      <li>Потому что поддерживает jQuery</li>
      <li>Из-за встроенного SQL</li>
      <li>Так как не требует компонентов</li>
    </ul>
  </li>

  <li>
    <h3>Что влияет на выбор фреймворка для проекта?</h3>
    <ul>
      <li><strong>Требования к производительности, SEO и командной экспертизе</strong></li>
      <li>Цвет сайта</li>
      <li>Поддержка FTP</li>
      <li>Наличие видеоуроков</li>
    </ul>
  </li>

  <li>
    <h3>Почему Angular предпочитают для крупных проектов?</h3>
    <ul>
      <li><strong>Из-за строгой архитектуры и модульности</strong></li>
      <li>Потому что он бесплатный</li>
      <li>Потому что он серверный</li>
      <li>Потому что он не использует DOM</li>
    </ul>
  </li>

  <li>
    <h3>Что такое Feature-Sliced Design (FSD)?</h3>
    <ul>
      <li><strong>Архитектура с делением кода на фичи, слои и модули</strong></li>
      <li>Фреймворк для анимации</li>
      <li>Система логирования</li>
      <li>Метод управления цветами</li>
    </ul>
  </li>

  <li>
    <h3>Что такое Domain-Driven Design (DDD)?</h3>
    <ul>
      <li><strong>Подход к разработке через бизнес-домены</strong></li>
      <li>Метод маршрутизации</li>
      <li>Подход к генерации HTML</li>
      <li>Стиль CSS-наименования</li>
    </ul>
  </li>

  <li>
    <h3>Как FSD обеспечивает слабую связанность?</h3>
    <ul>
      <li><strong>Через явные зависимости и ограничение доступа между слоями</strong></li>
      <li>Через глобальные переменные</li>
      <li>Скрывая все импорты</li>
      <li>Запуская всё в одном слое</li>
    </ul>
  </li>

  <li>
    <h3>Что такое архитектурный слой?</h3>
    <ul>
      <li><strong>Логическая часть проекта с определённой ответственностью</strong></li>
      <li>Файл конфигурации</li>
      <li>CSS-фреймворк</li>
      <li>Слой базы данных</li>
    </ul>
  </li>

  <li>
    <h3>Как SRP помогает архитектуре?</h3>
    <ul>
      <li><strong>Позволяет каждому модулю иметь только одну ответственность</strong></li>
      <li>Увеличивает число классов</li>
      <li>Уменьшает производительность</li>
      <li>Удаляет ненужный код</li>
    </ul>
  </li>

  <li>
    <h3>Как внедрить архитектуру без полного рефакторинга?</h3>
    <ul>
      <li><strong>Постепенно переводя модули в новую структуру</strong></li>
      <li>Полностью удалить старый код</li>
      <li>Обновить только документацию</li>
      <li>Переименовать переменные</li>
    </ul>
  </li>

`;

export default questionsConfig;
